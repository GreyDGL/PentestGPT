import dataclasses
import os
import re
import time
from typing import List

from google_gemini import GeminiAPI as GoogleGeminiAPI

from pentestgpt.utils.APIs.llm_api import LLMAPI, Message, Conversation


@dataclasses.dataclass
class GeminiConfig:
    model: str
    api_base: str
    gemini_key: str
    error_wait_time: float = 20
    is_debugging: bool = False


class GeminiAPI(LLMAPI):
    def __init__(self, config: GeminiConfig):
        super().__init__(config)
        self.name = "GeminiAPI"

    def _build_prompt(self, messages: List[Message]) -> str:
        # Implement prompt construction specific to Gemini API
        pass  # Replace with actual implementation

    def _extract_response(self, response_data: dict) -> str:
        # Implement response extraction specific to Gemini API
        pass  # Replace with actual implementation

    def _process_response(self, response: str) -> str:
        # Implement any necessary response processing
        return response

    def _chat_completion(self, history: List, model=None, temperature=0.5) -> str:
        # Implement chat completion using Google Gemini API
        google_gemini_api = GoogleGeminiAPI(api_key=self.config.gemini_key)
        response = google_gemini_api.complete_chat(history)
        return response
