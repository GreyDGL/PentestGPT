import loguru

from pentestgpt.utils.chatgpt import ChatGPT
from pentestgpt.utils.APIs.chatgpt_api import ChatGPTAPI
from pentestgpt.config.chatgpt_config import ChatGPTConfig
import openai
import argparse

from rich.console import Console

logger = loguru.logger


def main():
    parser = argparse.ArgumentParser(description="PentestGPTTestConnection")
    parser.add_argument(
        "--logDir",
        type=str,
        default="logs",
        help="Log file directory for PentestGPTTestConnection",
    )

    parser.add_argument(
        "--baseUrl",
        type=str,
        default="https://api.openai.com/v1",
        help="Base URL for OpenAI API,default: https://api.openai.com/v1",
    )

    args = parser.parse_args()
    logger.add(args.logDir + "/chatgpt_connection_test.log", level="ERROR")

    chatgpt_config = ChatGPTConfig(api_base=args.baseUrl)
    console = Console()

    # 1. test the connection for chatgpt api with GPT-4
    print("#### Test connection for OpenAI api (GPT-4)")
    try:
        chatgpt_config.model = "gpt-4"
        chatgpt = ChatGPTAPI(chatgpt_config)
        openai.api_key = chatgpt_config.openai_key
        result, conversation_id = chatgpt.send_new_message("Hi how are you?")
        console.print(
            "1. You're connected with OpenAI API. You have GPT-4 access. To start PentestGPT, please use <pentestgpt --reasoning_model=gpt-4>",
            style="bold green",
        )
    except Exception as e:  # use a general exception first. Update later for debug
        console.print(
            "1. The OpenAI API key is not properly configured. Please follow README to update OpenAI API key through `export OPENAI_KEY=<>`.",
            style="bold red",
        )
        print("The error is below:", e)

    # 2. test the connection for chatgpt api with GPT-3.5
    print("#### Test connection for OpenAI api (GPT-3.5)")
    try:
        chatgpt_config.model = "gpt-3.5-turbo-16k"
        chatgpt = ChatGPTAPI(chatgpt_config)
        openai.api_key = chatgpt_config.openai_key
        result, conversation_id = chatgpt.send_new_message("Hi how are you?")
        console.print(
            "2. You're connected with OpenAI API. You have GPT-3.5 access. To start PentestGPT, please use <pentestgpt --reasoning_model=gpt-3.5-turbo-16k>",
            style="bold green",
        )
    except Exception as e:  # use a general exception first. Update later for debug
        logger.error(e)
        console.print(
            "2. The OpenAI API key is not properly configured. The likely reason is that you do not link a payment method to OpenAI so your key is not active. \nPlease follow README to update OpenAI API key through `export OPENAI_KEY=<>`",
            style="bold red",
        )
        print("The error is below:", e)


    # 3. test the connection for anthropic api with claude-instant-1
    print("#### Test connection for Claude api (claude-instant-1)")
    try:
        chatgpt_config.model = "claude-instant-1"
        chatgpt = ChatGPTAPI(chatgpt_config)
        result, conversation_id = chatgpt.send_new_message("Hi how are you?")
        console.print(
            "2. You're connected with Anthropic API. You have Claude access. To start PentestGPT, please use <pentestgpt --reasoning_model=claude-instant-1>",
            style="bold green",
        )
    except Exception as e:  # use a general exception first. Update later for debug
        logger.error(e)
        console.print(
            "2. The Anthropic API key is not properly configured. The likely reason is that you do not link a payment method to Anthropic so your key is not active. \nPlease follow README to update OpenAI API key through `export ANTHROPIC_KEY=<>`",
            style="bold red",
        )
        print("The error is below:", e)
    
    # 4. test the connection for cohere api with command-nightly
    print("#### Test connection for Cohere api (command-nightly)")
    try:
        chatgpt_config.model = "command-nightly"
        chatgpt = ChatGPTAPI(chatgpt_config)
        result, conversation_id = chatgpt.send_new_message("Hi how are you?")
        console.print(
            "2. You're connected with Cohere API. You have Claude access. To start PentestGPT, please use <pentestgpt --reasoning_model=command-nightly>",
            style="bold green",
        )
    except Exception as e:  # use a general exception first. Update later for debug
        logger.error(e)
        console.print(
            "2. The Cohere API key is not properly configured. The likely reason is that you do not link a payment method to Cohere so your key is not active. \nPlease follow README to update OpenAI API key through `export ANTHROPIC_KEY=<>`",
            style="bold red",
        )
        print("The error is below:", e)
    
    # 4. test the connection for replicate api with llama2
    print("#### Test connection for Replicate api (replicate/llama-2-70b-chat:2c1608e18606fad2812020dc541930f2d0495ce32eee50074220b87300bc16e1)")
    try:
        chatgpt_config.model = "replicate/llama-2-70b-chat:2c1608e18606fad2812020dc541930f2d0495ce32eee50074220b87300bc16e1"
        chatgpt = ChatGPTAPI(chatgpt_config)
        result, conversation_id = chatgpt.send_new_message("Hi how are you?")
        console.print(
            "2. You're connected with Replicate API. You have Claude access. To start PentestGPT, please use <pentestgpt --reasoning_model=replicate/llama-2-70b-chat:2c1608e18606fad2812020dc541930f2d0495ce32eee50074220b87300bc16e1>",
            style="bold green",
        )
    except Exception as e:  # use a general exception first. Update later for debug
        logger.error(e)
        console.print(
            "2. The Replicate API key is not properly configured. The likely reason is that you do not link a payment method to Replicate so your key is not active. \nPlease follow README to update OpenAI API key through `export ANTHROPIC_KEY=<>`",
            style="bold red",
        )
        print("The error is below:", e)

    # 3. test the connection for chatgpt cookie (deprecated)
    print("#### Test connection for chatgpt cookie")
    try:
        chatgpt = ChatGPT(chatgpt_config)
        conversations = chatgpt.get_conversation_history()
        if conversations is not None:
            console.print(
                "3. You're connected with ChatGPT Plus cookie. \nTo start PentestGPT, please use <pentestgpt --reasoning_model=gpt-4>",
                style="bold green",
            )
        else:
            console.print(
                "3. The cookie is not properly configured with ChatGPT Cookie. If you're not using cookie bypass for testing, please neglect this message.",
                style="bold red",
            )
    except Exception as e:  # use a general exception first. Update later for debug
        logger.error(e)
        print("The cookie is not properly configured.")


if __name__ == "__main__":
    main()
