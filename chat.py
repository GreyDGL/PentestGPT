'''
Author: keysaim.hbp
Date: Fri May 26 2023
'''

import sys
import loguru

from utils.chatgpt import ChatGPT
from config.chatgpt_config import ChatGPTConfig

logger = loguru.logger
logger.remove()
logger.add(sys.stderr, level="INFO")
# logger.add(level="ERROR", sink="logs/chatgpt_connection_test.log")


if __name__ == "__main__":
    chatgpt_config = ChatGPTConfig()
    # 1. test the connection for chatgpt cookie
    print("#### Test connection for chatgpt cookie")
    try:
        # chatgpt_config.model = "gpt-3.5-turbo"
        chatgpt = ChatGPT(chatgpt_config)
        logger.info(f'authorization: {chatgpt.headers["authorization"]}')
        conversations = chatgpt.get_conversation_history()
        logger.info(conversations)
        msg = '你现在是一个儿童剧老师，请推荐几个适合儿童表演的成语故事'
        (text, cid) = chatgpt.send_new_message(msg)
        print(text)
        print(cid)
        if not cid:
            raise "new conversation failed"
        cv = chatgpt.get_cached_conversation(cid)
        logger.info(cv)
    except Exception as e:
        logger.info(f"exception, {e}")
        print(e)

    # def moderate_conversation(self, conversation_id: str, lastMsg: str, lastMsgId: str):
    #     # moderate conversation with its uuid
    #     if not conversation_id:
    #         return
    #     url = "https://chat.openai.com/backend-api/moderations"
    #     data = {
    #         "conversation_id": conversation_id,
    #         "input": lastMsg,
    #         "message_id": lastMsgId,
    #         "model": "text-moderation-playground",
    #     }
    #     r = requests.post(url, headers=self.headers, json=data, proxies=self.proxies)

    #     if r.status_code != 200:
    #         logger.error(r)
    #         return False

    #     result = r.json()
    #     logger.info(f"moderate conversation {conversation_id}, result: {result}")
    #     return True
    